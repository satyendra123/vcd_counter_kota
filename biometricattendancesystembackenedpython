#step-1 attendance/views.py
'''
from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def fingerprint_actions(request):
    if request.method == 'POST':
        if 'FingerID' in request.POST:
            FingerID = request.POST['FingerID']
            if FingerID == "1": 
                return JsonResponse({'response': 'loginuser_name1'})
            else:
                return JsonResponse({'response': 'logoutuser_name' + FingerID})
            
        elif request.POST.get('DeleteID') == 'check':
            return JsonResponse({'response': 'del-id123'})
        
        elif request.POST.get('UpdateID') == 'check':
            return JsonResponse({'response': 'update-id-123'})
        
        elif request.POST.get('Get_Fingerid') == 'get_id':
            return JsonResponse({'response': 'add-id123'})

        elif 'confirm_id' in request.POST:
            confirm_id = request.POST['confirm_id']
            return JsonResponse({'response': 'ID ' + confirm_id + ' added'})
        
    return JsonResponse({'response': 'only POST allowed'})

'''
'''
from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def fingerprint_actions(request):
    if request.method == 'POST':
        if 'FingerID' in request.POST:
            FingerID = request.POST['FingerID']
            if FingerID == "1": 
                return JsonResponse({'response': 'loginuser_name1'})
            else:
                return JsonResponse({'response': 'logoutuser_name' + FingerID})
            
        elif request.POST.get('DeleteID') == 'check':
            return JsonResponse({'response': 'del-id123'})
        
        elif request.POST.get('UpdateID') == 'check':
            return JsonResponse({'response': 'update-id-123'})
        
        elif request.POST.get('Get_Fingerid') == 'get_id':
            return JsonResponse({'response': 'add-id123'})

        elif 'confirm_id' in request.POST:
            confirm_id = request.POST['confirm_id']
            return JsonResponse({'response': 'ID ' + confirm_id + ' added'})
        
    return JsonResponse({'response': 'only POST allowed'})
'''

# your_app/views.py
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from django.utils import timezone
from .models import User, UserLog
from .serializers import UserSerializer, UserLogSerializer

@api_view(['POST'])
def send_finger_id(request):
    finger_id = request.data.get('FingerID')
    try:
        user = User.objects.get(fingerprint_id=finger_id)
        if user.username:  # User exists, handle login/logout
            log_entry = UserLog.objects.filter(fingerprint_id=finger_id, checkindate=timezone.now().date(), timeout='').first()
            if not log_entry:  # Login
                UserLog.objects.create(username=user.username, serialnumber=user.serialnumber, fingerprint_id=finger_id, checkindate=timezone.now().date(), timein=timezone.now())
                return Response({'message': f'login {user.username}'}, status=status.HTTP_200_OK)
            else:  # Logout
                log_entry.timeout = timezone.now()
                log_entry.save()
                return Response({'message': f'logout {user.username}'}, status=status.HTTP_200_OK)
        else:  # Available fingerprint for new user
            if User.objects.filter(fingerprint_select=True).exists():
                User.objects.filter(fingerprint_select=True).update(fingerprint_select=False)
            user.fingerprint_select = True
            user.save()
            return Response({'message': 'available'}, status=status.HTTP_200_OK)
    except User.DoesNotExist:
        if User.objects.filter(fingerprint_select=True).exists():
            User.objects.filter(fingerprint_select=True).update(fingerprint_select=False)
        User.objects.create(username='', serialnumber='', gender='', fingerprint_id=finger_id, fingerprint_select=True)
        return Response({'message': 'succesful1'}, status=status.HTTP_201_CREATED)
    except Exception as e:
        return Response({'message': str(e)}, status=status.HTTP_400_BAD_REQUEST)

@api_view(['POST'])
def get_finger_id(request):
    if request.data.get('Get_Fingerid') == 'get_id':
        user = User.objects.filter(add_fingerid=True, username='').first()
        if user:
            return Response({'message': f'add-id {user.fingerprint_id}'}, status=status.HTTP_200_OK)
        return Response({'message': 'Nothing'}, status=status.HTTP_200_OK)
    return Response(status=status.HTTP_400_BAD_REQUEST)

@api_view(['POST'])
def confirm_finger_id(request):
    finger_id = request.data.get('confirm_id')
    try:
        User.objects.filter(fingerprint_select=True).update(fingerprint_select=False)
        User.objects.filter(fingerprint_id=finger_id).update(add_fingerid=False, fingerprint_select=True)
        return Response({'message': 'Fingerprint has been added!'}, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({'message': str(e)}, status=status.HTTP_400_BAD_REQUEST)

@api_view(['POST'])
def delete_finger_id(request):
    if request.data.get('DeleteID') == 'check':
        user = User.objects.filter(del_fingerid=True).first()
        if user:
            user_id = user.fingerprint_id
            user.delete()
            return Response({'message': f'del-id {user_id}'}, status=status.HTTP_200_OK)
        return Response({'message': 'nothing'}, status=status.HTTP_200_OK)
    return Response(status=status.HTTP_400_BAD_REQUEST)

@api_view(['POST'])
def update_finger_id(request):
    finger_id = request.data.get('FingerID')
    username = request.data.get('username')
    serialnumber = request.data.get('serialnumber')
    gender = request.data.get('gender')

    try:
        user = User.objects.get(fingerprint_id=finger_id)
        user.username = username
        user.serialnumber = serialnumber
        user.gender = gender
        user.save()
        return Response({'message': 'User details updated successfully!'}, status=status.HTTP_200_OK)
    except User.DoesNotExist:
        return Response({'message': 'User not found!'}, status=status.HTTP_404_NOT_FOUND)
    except Exception as e:
        return Response({'message': str(e)}, status=status.HTTP_400_BAD_REQUEST)

#step-2 attendance/urls.py
'''
# Add the following to your Django urls.py
from django.urls import path
from . import views

urlpatterns = [
    # Other URL patterns
    path('biometricattendance/getdata/check_add_id/', views.fingerprint_actions, name='check_add_id'),
    path('biometricattendance/getdata/check_delete_id/', views.fingerprint_actions, name='check_delete_id'),
    path('biometricattendance/getdata/check_update_id/', views.fingerprint_actions, name='check_update_id'),
]
'''

# your_app/urls.py
from django.urls import path
from .views import send_finger_id, get_finger_id, confirm_finger_id, delete_finger_id, update_finger_id

urlpatterns = [
    path('biometricattendance/getdata/fingerid_action/', send_finger_id, name='send_finger_id'),
    path('biometricattendance/getdata/get_fingerid/', get_finger_id, name='get_finger_id'),
    path('biometricattendance/getdata/confirm_fingerid/', confirm_finger_id, name='confirm_finger_id'),
    path('biometricattendance/getdata/delete_fingerid/', delete_finger_id, name='delete_finger_id'),
    path('biometricattendance/getdata/update_fingerid/', update_finger_id, name='update_finger_id'),  # New URL for update
]

#step-3 attendance/serializers.py

# your_app/serializers.py
from rest_framework import serializers
from .models import User, UserLog

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = '__all__'

class UserLogSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserLog
        fields = '__all__'

#step-4 attendance/models.py
from django.db import models

# your_app/models.py
from django.db import models

class User(models.Model):
    username = models.CharField(max_length=100, blank=True)
    serialnumber = models.CharField(max_length=100, blank=True)
    gender = models.CharField(max_length=10, blank=True)
    fingerprint_id = models.IntegerField(unique=True)
    fingerprint_select = models.BooleanField(default=False)
    add_fingerid = models.BooleanField(default=False)
    del_fingerid = models.BooleanField(default=False)

    def __str__(self):
        return self.username

class UserLog(models.Model):
    username = models.CharField(max_length=100)
    serialnumber = models.CharField(max_length=100)
    fingerprint_id = models.IntegerField()
    checkindate = models.DateField()
    timein = models.TimeField()
    timeout = models.TimeField(blank=True, null=True)

    def __str__(self):
        return f"{self.username} - {self.checkindate}"

#Step-6 settings.py
"""
Django settings for biometricattendance project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^$n%ven86qw6r&kyyth3*o2z7gr!+tb+u%qlbivo1u(d@ve)os'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.1.9']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'attendance',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'biometricattendance.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'biometricattendance.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_ALL_HEADERS=True

CORS_ALLOWED_ORIGINS = [
    "http://192.168.1.9:3000",
    "http://192.168.1.9:3000",  # Add any additional origins if needed
]

#step-7 main urls.py
"""
URL configuration for biometricattendance project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('attendance.urls')),
]
